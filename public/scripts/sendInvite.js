/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var InviteHeader = React.createClass({

  render: function() {
    var child = this.props.childes;
    return (
      <div className="inviteHeader">
        <h2 className="invite-welcome">
          Hello Linda
        </h2>
        <img src="" alt=""/>
        <p>{child}</p>
      </div>
    );
  }
});

var Comment = React.createClass({

  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
      </div>
    );
  }
});

var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      contentType: "application/json",
      type: 'POST',
      data: JSON.stringify({email : "parent1@gmail.com"}),
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(inviteJSON) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    //comment.id = Date.now();
    //var newComments = comments.concat([comment]);
    //this.setState({data: newComments});
    $.ajax({
      url: "https://sitters-ws.herokuapp.com/insertInvite",
      dataType: 'json',
      type: 'POST',
      contentType: 'application/json',
      headers: {
        'Access-Control-Allow-Origin': '*'
      },
      data: inviteJSON,
      crossDomain: true,
      success: function(data) {
        //this.setState({data: data});
        console.log('yoelllll');
      }.bind(this),
      error: function(xhr, status, err) {
        console.log(err);
       // this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <SittersList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var SittersList = React.createClass({
  render: function() {
    // var sittersNodes = this.props.data.map(function(sitter) {
    return (
      <InviteHeader></InviteHeader>
    );
    // });
    return (
      <div className="sittersList">
        {sittersNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleDateChange : function(e){
    this.setState({date: e.target.value});
  },
  handleTimeChange : function(e){
    this.setState({time: e.target.value});
  },
  handleLocationChange : function(e){
    this.setState({location: e.target.value});
  },
  handleReoccurringNoneChange : function(e){
    this.setState({none: e.target.value});
  },
  handleReoccurringWeeklyChange : function(e){
    this.setState({weekly: e.target.value});
  },
  handleReoccurringMonthlyChange : function(e){
    this.setState({monthly: e.target.value});
  },


  handleAllergiesChange : function(e){
    this.setState({allergies: e.target.value});
  },
  handleReviewTextChange : function(e){
    this.setState({reviewText: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var parentEmail = "parent1@gmail.com";
    var sitterEmail = "sitter1@gmail.com";
    var location = this.state.location.trim();
    //var date = this.state.date.trim();
    var time = this.state.time.trim();
    // var none = this.state.none.trim();
    // var weekly = this.state.weekly.trim();
    // var monthly = this.state.monthly.trim();
    // var reoccurring;
    // if(!none){
    //   if(!weekly){
    //     reoccurring = monthly;
    //   }
    //   else
    //     reoccurring = weekly;
    // }
    // else
    //   reoccurring = none;
    var endTime = time + 2;
    var allergies = this.state.allergies.trim();

    // var author = this.state.author.trim();
    // var text = this.state.text.trim();
    // if (!text || !author) {
    //   return;
    // }
    var inviteJSON = {
      "sitterEmail": sitterEmail,
      "parentEmail": parentEmail,
      "street": location,
      "date": "dev1097",
      "recurring": "Weekly",
      "startTime": time,
      "endTime": endTime,
      "allergies": [
        allergies
      ],
      "status": "Waiting"
    };
    this.props.onCommentSubmit(inviteJSON);
   // this.setState({author: '', text: ''});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <table class="">
          <thead>
          <th class="icon">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 125">  ><path fill="#f7a1a1" d="M44.8 82.1c-5-0.5-9.9-1.7-14.7-3.4 -4.7-1.7-9.1-4-12.9-6.8l9.2-13.6c3.3 2.3 6.5 4.2 9.6 5.5 3.1 1.4 6.3 2.3 9.5 2.9V54.4c-4.1-1-7.7-2-10.8-3.3 -3.1-1.2-5.7-2.7-7.8-4.5 -2.1-1.7-3.6-3.8-4.7-6.1 -1.1-2.3-1.6-5.1-1.6-8.3v-0.2c0-3 0.5-5.8 1.6-8.3 1.1-2.5 2.7-4.7 4.8-6.6 2.1-1.9 4.6-3.4 7.7-4.6 3-1.2 6.5-1.9 10.4-2.1V4.7h10.6v6.1c4.2 0.5 8.1 1.4 11.7 2.8 3.5 1.4 6.9 3.1 9.9 5.2L68.9 32.6c-2.1-1.5-4.3-2.8-6.7-3.8 -2.4-1-4.7-1.8-7-2.4v11.9c4.1 1 7.7 2.1 10.7 3.3 3 1.3 5.6 2.8 7.6 4.5 2 1.7 3.6 3.8 4.6 6.2 1 2.4 1.5 5.2 1.5 8.3v0.2c0 3.1-0.6 6-1.7 8.4 -1.2 2.5-2.8 4.7-4.9 6.5 -2.1 1.8-4.7 3.3-7.6 4.4 -3 1.1-6.3 1.8-9.9 2.1v10H44.8V82.1zM45.6 25.5c-2.5 0.2-4.3 0.8-5.4 1.7 -1.1 0.9-1.6 2.1-1.6 3.4v0.2c0 1.4 0.5 2.5 1.4 3.3 0.9 0.9 2.8 1.7 5.6 2.4V25.5zM55.1 67.3c4.6-0.5 6.9-2.2 6.9-5.2v-0.2c0-1.4-0.5-2.5-1.4-3.4 -1-0.9-2.8-1.7-5.4-2.5V67.3z"/></svg>
          </th>
          <th class="icon">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 125"><path fill="#f7a1a1"  d="M77 90.4L50 76.2 23 90.4l5.2-30L6.4 39.1l30.1-4.4L50 7.4l13.5 27.3 30.1 4.4L71.8 60.4 77 90.4zM27.9 46.1L38.9 56.9l-2.6 15.2L50 64.9l13.7 7.2L61.1 56.9l11.1-10.8-15.3-2.2L50 30l-6.8 13.9L27.9 46.1z"/></svg>
          </th>
          <th class="icon">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 125"><path fill="#f7a1a1" d="M78.2 58.2C81.1 55.8 83 52 83 48c0-6.9-5.6-13-12-13s-12 6.1-12 13c0 4 1.9 7.8 4.8 10.2 -1.3 0.5-2.5 1-3.7 1.7 -3.8-4.5-8.8-8-14.6-9.7C49.9 47.1 53 41.8 53 36c0-9.1-7.5-17-16-17s-16 7.9-16 17c0 5.8 3.1 11.1 7.5 14.2C16.1 53.9 7 65.4 7 79c0 1.1 0.9 2 2 2h82c1.1 0 2-0.9 2-2C93 69.4 86.8 61.2 78.2 58.2zM63 48c0-4.2 3.5-9 8-9s8 4.8 8 9c0 4.2-3.5 9-8 9S63 52.2 63 48zM25 36c0-6.1 5.1-13 12-13s12 6.9 12 13 -5.1 13-12 13S25 42.1 25 36zM11.1 77c1-13.4 12.3-24 25.9-24s24.9 10.6 25.9 24H11.1zM66.9 77c-0.3-5-1.9-9.8-4.5-13.8C65 61.8 67.9 61 71 61c9.2 0 16.9 7 17.9 16H66.9z"/></svg>
          </th>
          </thead>
          <tbody>
          <tr class="">
            <td><label>Date <input type="date" value={this.state.date} onChange={this.handleDateChange}/> </label></td>
            <td><label>Time <input type="time" value={this.state.time} onChange={this.handleTimeChange}/> </label></td>
            <td><label>Location <input type="text" value={this.state.location} onChange={this.handleLocationChange}/></label></td>
          </tr>
          </tbody>
        </table>
        <label>Reoccurring</label>
        <label><input type="radio" name="reoccurring" value="none" value={this.state.none} onChange={this.handleReoccurringNoneChange}/>None</label>
        <label><input type="radio" name="reoccurring" value="weekly" value={this.state.weekly} onChange={this.handleReoccurringWeeklyChange}/>Weekly</label>
        <label><input type="radio" name="reoccurring" value="monthly" value={this.state.monthly} onChange={this.handleReoccurringMonthlyChange}/>Monthly</label>
        <label><input type="text" value={this.state.allergies} onChange={this.handleAllergiesChange}/>Allergies</label>
        <textarea name="message" id="msg" cols="30" rows="10" value={this.state.reviewText} onChange={this.handleReviewTextChange}></textarea>

        <input type="submit" value="Submit" />
      </form>
    );
  }
});

ReactDOM.render(
  <CommentBox url="https://sitters-ws.herokuapp.com/getParentByEmail/" pollInterval={2000} />,
  document.getElementById('content')
);
